{"version":3,"sources":["NavMenu.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","functionDrop","state","list","setState","linksMarkup","links","map","link","index","react_default","a","createElement","key","className","href","label","linksMarkup2","souMenu","onClick","id","Component","App","src_NavMenu_0","active","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAkEeA,2BA9DX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,aAAa,WACY,QAAlBP,EAAKQ,MAAMC,MACVT,EAAKU,SAAS,CACVD,KAAK,OAGQ,OAAlBT,EAAKQ,MAAMC,MACbT,EAAKU,SAAS,CACVD,KAAK,SAdVT,EAAKQ,MAAO,CACRC,KAAK,OAHKT,wEAsBf,IAAIW,EAAYR,KAAKJ,MAAMa,MAAMC,IAAK,SAACC,EAAMC,GAEzC,OACCC,EAAAC,EAAAC,cAAA,MAAIC,IAAI,QAAQC,UAAU,mBAC1BJ,EAAAC,EAAAC,cAAA,KAAIE,UAAU,cAAeC,KAAMP,EAAKA,MACvCA,EAAKQ,UAKNC,EAAapB,KAAKJ,MAAMyB,QAAQX,IAAK,SAACC,EAAMC,GAC5C,OACAC,EAAAC,EAAAC,cAAA,MAAKC,IAAI,QAAQC,UAAU,mBACTJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,cAAcC,KAAMP,EAAKA,MAAtC,KAA+CA,EAAKQ,UAQ1E,OACIN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAEfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZT,EACEK,EAAAC,EAAAC,cAAA,MAAIO,QAAStB,KAAKI,aAAca,UAAU,oBAAmBJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gCAAiCC,KAAK,KAAnD,YACzDL,EAAAC,EAAAC,cAAA,MAAIE,UAAWjB,KAAKK,MAAMC,KAAMiB,GAAG,aAClCH,cApDHI,cCyBPC,6MAvBbpB,MAAQ,2EAeN,OACIQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACfJ,EAAAC,EAAAC,cAACW,EAAD,CAASjB,MAdD,CACP,CAACU,MAAM,OAAQR,KAAK,QAAQgB,QAAO,GACnC,CAACR,MAAM,QAASR,KAAK,UACrB,CAACQ,MAAM,UAAWR,KAAK,aAWDU,QATX,CACX,CAACF,MAAM,oBAAqBR,KAAK,sBACjC,CAACQ,MAAM,eAAgBR,KAAK,iBAC5B,CAACQ,MAAM,iBAAkBR,KAAK,8BAZrBa,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.11411e66.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './NavMenu.css';\r\n\r\nclass NavMenu extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state=({\r\n            list:'off',\r\n        })\r\n    }\r\n\r\n  \r\n    functionDrop=()=>{\r\n        if(this.state.list==='off'){\r\n            this.setState({\r\n                list:'on'\r\n            })\r\n        }\r\n        if(this.state.list==='on'){\r\n         this.setState({\r\n             list:'off'\r\n         })\r\n     }\r\n    }\r\n \r\n    render() { \r\n       let linksMarkup=this.props.links.map ((link, index)=>{\r\n           \r\n           return (\r\n            <li key='index' className=\"menu__list-item\">\r\n            <a  className=\"menu__link \"  href={link.link}>\r\n            {link.label}</a></li>\r\n                    \r\n            );\r\n        });\r\n\r\n        let linksMarkup2=this.props.souMenu.map ((link, index)=>{\r\n            return (\r\n            <li  key='index' className=\"menu__list-item\">\r\n            {/* linkMarkup */}<a className=\"menu__link \" href={link.link}>  {link.label}</a>\r\n            </li>\r\n                    \r\n            );\r\n\r\n       \r\n        });\r\n\r\n        return (\r\n            <nav className=\"menu\">\r\n\r\n            <div className=\"menu__right\">\r\n                <ul className=\"menu__list\">\r\n                 {linksMarkup}\r\n                    <li onClick={this.functionDrop} className=\"menu__list-item \"><a className=\"menu__link menu__link--active\"  href=\"#\">Services</a>\r\n                        <ul className={this.state.list} id=\"drop-menu\">\r\n                        {linksMarkup2}\r\n\t\t\t\t\t    </ul>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n   \r\n          );\r\n    }\r\n}\r\n \r\nexport default NavMenu;","import React, { Component } from 'react';\nimport './App.css'\nimport NavMenu from './NavMenu.js'\n\nclass App extends Component {\n  state = {  }\n  \n  render() { \n      let links=[\n         {label:'Home', link:'#home',active:true} ,\n         {label:'About', link:'#about'},\n         {label:'Contact', link:'#contact'},\n        ]\n        let souMenu=[\n         {label:'For entrepreneurs', link:'#for-entrepreneurs'} ,\n         {label:'For students', link:'#for-students'},\n         {label:'For hobbyistes', link:'#for-hobbyistes'},\n        ]\n\t\t\t\t\t\n  \n    return ( \n        <div className=\"container center\">\n        <NavMenu links={links} souMenu={souMenu}/>\n       </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}